import type { NextRequest } from "next/server";
import { NextResponse } from "next/server";
import { verifyToken } from "./verify_token";

function setCorsHeaders(res: NextResponse): void {
  res.headers.set("Access-Control-Allow-Origin", "*");
  res.headers.set(
    "Access-Control-Allow-Methods",
    "GET, POST, PUT, DELETE, OPTIONS"
  );
  res.headers.set(
    "Access-Control-Allow-Headers",
    "Content-Type, Authorization"
  );
}

function handleCors(req: NextRequest, res: NextResponse): NextResponse {
  setCorsHeaders(res);
  if (req.method === "OPTIONS") {
    return new NextResponse(null, {
      status: 204,
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
        "Access-Control-Allow-Headers": "Content-Type, Authorization",
        "Access-Control-Max-Age": "86400"
      }
    });
  }
  return res;
}

export type WibuMiddlewareConfig = {
  /**
   * @example
   * ['/auth/login', '/auth/register']
   */
  publicRoutes: string[];
  /**
   * @example
   * [/^\/api\/files\/\w+/]
   */
  publicRoutePatterns: RegExp[];
  /**
   * @example
   * '/auth/login'
   */
  loginPath: string;
  /**
   * @example
   * '/user'
   */
  userPath: string;
  /**
   * @example
   * '/api'
   */
  apiPath: string;
  /**
   * @example
   * 'your_session_key'
   * */
  sessionKey: string;
  /**
   * @example
   * '30bcb57df67b4d8496cde071bc3a4435'
   * */
  encodedKey: string;
  /**
   * @example
   * '/api/validation'
   * */
  validationApiRoute: string;
};

/**
 * Middleware untuk melakukan otentikasi dan menangani CORS pada permintaan.
 * @example
 * // Memanggil middleware dan menunggu responsnya
 * const response = await wibuMiddleware( req: request, { config: WibuMiddlewareConfig });
 * // Konfigurasi buat middleware Next.js
 * export const config = {
 *   matcher: ["/((?!_next|static|favicon.ico).*)"]
 * };
 */
export async function wibuMiddleware(
  req: NextRequest | any,
  {
    apiPath,
    loginPath,
    userPath,
    encodedKey,
    publicRoutes,
    publicRoutePatterns,
    sessionKey,
    validationApiRoute
  }: WibuMiddlewareConfig
) {
  const { pathname } = req.nextUrl;

  if (
    publicRoutes.includes(pathname) ||
    publicRoutePatterns.some((pattern) => pattern.test(pathname))
  ) {
    return handleCors(req, NextResponse.next());
  }

  const token =
    req.cookies.get(sessionKey)?.value ||
    req.headers.get("Authorization")?.split(" ")[1];

  const user = await verifyToken({ token, encodedKey: encodedKey });

  if (!user) {
    if (pathname.startsWith(apiPath)) {
      return handleCors(req, unauthorizedResponse());
    }
    return handleCors(req, NextResponse.redirect(new URL(loginPath, req.url)));
  }

  if (pathname === loginPath) {
    return handleCors(req, NextResponse.redirect(new URL(userPath, req.url)));
  }

  const validationResponse = await fetch(new URL(validationApiRoute, req.url), {
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${token}`
    }
  });

  if (!validationResponse.ok) {
    return handleCors(req, unauthorizedResponse());
  }

  return handleCors(req, NextResponse.next());
}

function unauthorizedResponse(): NextResponse {
  return new NextResponse(JSON.stringify({ error: "Unauthorized" }), {
    status: 401,
    headers: { "Content-Type": "application/json" }
  });
}
